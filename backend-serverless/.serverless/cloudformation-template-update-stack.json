{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "StreamDashtriggerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rsvp-serverless-backend-prod-stream-trigger"
      }
    },
    "PostDashgitstatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rsvp-serverless-backend-prod-post-gitstatus"
      }
    },
    "AddDashguestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rsvp-serverless-backend-prod-add-guest"
      }
    },
    "GetDashguestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rsvp-serverless-backend-prod-get-guest"
      }
    },
    "GetDashguestsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rsvp-serverless-backend-prod-get-guests"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": ["-", ["rsvp-serverless-backend", "prod", "lambda"]]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["logs:CreateLogStream", "logs:CreateLogGroup"],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rsvp-serverless-backend-prod*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["logs:PutLogEvents"],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rsvp-serverless-backend-prod*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/rsvp-serverless-backend-prod"
                },
                {
                  "Effect": "Allow",
                  "Action": ["ses:SendEmail"],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": ["GuestsTable", "StreamArn"]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "rsvp-serverless-backend",
              "prod",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "StreamDashtriggerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rsvp-serverless-backend/prod/1591286276290-2020-06-04T15:57:56.290Z/rsvp-serverless-backend.zip"
        },
        "FunctionName": "rsvp-serverless-backend-prod-stream-trigger",
        "Handler": "lambda/stream-trigger.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 5,
        "Description": "DynamoDB Stream SES Trigger",
        "Environment": {
          "Variables": {
            "GUESTS_TABLE": "rsvp-serverless-backend-prod",
            "EMAIL": "ahwang55@gmail.com",
            "DOMAIN": "carolandarthur.com",
            "GH_ACCESS_TOKEN": "cdf68d5884c3cbe2a2f2fbf4c8917458dee8c059",
            "GH_USERNAME": "ArthurHwang"
          }
        }
      },
      "DependsOn": ["StreamDashtriggerLogGroup"]
    },
    "StreamDashtriggerLambdaVersionDjvYYWsAUQbehxGXj2INBWpTIc7IUD8RqbYnVEtQ8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StreamDashtriggerLambdaFunction"
        },
        "CodeSha256": "xV6V2kd2JQg5Vhy77vcQNIz5sS/x5zb0ob/Y0UkTHXg=",
        "Description": "DynamoDB Stream SES Trigger"
      }
    },
    "PostDashgitstatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rsvp-serverless-backend/prod/1591286276290-2020-06-04T15:57:56.290Z/rsvp-serverless-backend.zip"
        },
        "FunctionName": "rsvp-serverless-backend-prod-post-gitstatus",
        "Handler": "lambda/post-gitstatus.handler",
        "MemorySize": 128,
        "Role": "arn:aws:iam::307030026322:role/service-role/git-commit-status-role-l9oj1grx",
        "Runtime": "nodejs12.x",
        "Timeout": 5,
        "Description": "Post pipeline execution state to GitHub",
        "Environment": {
          "Variables": {
            "GUESTS_TABLE": "rsvp-serverless-backend-prod",
            "EMAIL": "ahwang55@gmail.com",
            "DOMAIN": "carolandarthur.com",
            "GH_ACCESS_TOKEN": "cdf68d5884c3cbe2a2f2fbf4c8917458dee8c059",
            "GH_USERNAME": "ArthurHwang"
          }
        }
      },
      "DependsOn": ["PostDashgitstatusLogGroup"]
    },
    "PostDashgitstatusLambdaVersionNYDuHtzwiLGhq9rbjVs6W2KnTs1UyUW0LSavxY08G4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostDashgitstatusLambdaFunction"
        },
        "CodeSha256": "xV6V2kd2JQg5Vhy77vcQNIz5sS/x5zb0ob/Y0UkTHXg=",
        "Description": "Post pipeline execution state to GitHub"
      }
    },
    "AddDashguestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rsvp-serverless-backend/prod/1591286276290-2020-06-04T15:57:56.290Z/rsvp-serverless-backend.zip"
        },
        "FunctionName": "rsvp-serverless-backend-prod-add-guest",
        "Handler": "api/add-guest.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 5,
        "Description": "POST /guest",
        "Environment": {
          "Variables": {
            "GUESTS_TABLE": "rsvp-serverless-backend-prod",
            "EMAIL": "ahwang55@gmail.com",
            "DOMAIN": "carolandarthur.com",
            "GH_ACCESS_TOKEN": "cdf68d5884c3cbe2a2f2fbf4c8917458dee8c059",
            "GH_USERNAME": "ArthurHwang"
          }
        }
      },
      "DependsOn": ["AddDashguestLogGroup"]
    },
    "AddDashguestLambdaVersion0NUuBPQzTPy5NvO616TpZonuVQFBnJlUeCYAk5UyLI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddDashguestLambdaFunction"
        },
        "CodeSha256": "xV6V2kd2JQg5Vhy77vcQNIz5sS/x5zb0ob/Y0UkTHXg=",
        "Description": "POST /guest"
      }
    },
    "GetDashguestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rsvp-serverless-backend/prod/1591286276290-2020-06-04T15:57:56.290Z/rsvp-serverless-backend.zip"
        },
        "FunctionName": "rsvp-serverless-backend-prod-get-guest",
        "Handler": "api/get-guest.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 5,
        "Description": "GET /guest/{email}",
        "Environment": {
          "Variables": {
            "GUESTS_TABLE": "rsvp-serverless-backend-prod",
            "EMAIL": "ahwang55@gmail.com",
            "DOMAIN": "carolandarthur.com",
            "GH_ACCESS_TOKEN": "cdf68d5884c3cbe2a2f2fbf4c8917458dee8c059",
            "GH_USERNAME": "ArthurHwang"
          }
        }
      },
      "DependsOn": ["GetDashguestLogGroup"]
    },
    "GetDashguestLambdaVersion1WXxDUR9vJ7TeEj0Ytah51GJFckzAqzp3NafFFKzk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashguestLambdaFunction"
        },
        "CodeSha256": "xV6V2kd2JQg5Vhy77vcQNIz5sS/x5zb0ob/Y0UkTHXg=",
        "Description": "GET /guest/{email}"
      }
    },
    "GetDashguestsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rsvp-serverless-backend/prod/1591286276290-2020-06-04T15:57:56.290Z/rsvp-serverless-backend.zip"
        },
        "FunctionName": "rsvp-serverless-backend-prod-get-guests",
        "Handler": "api/get-guests.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 5,
        "Description": "GET /guests",
        "Environment": {
          "Variables": {
            "GUESTS_TABLE": "rsvp-serverless-backend-prod",
            "EMAIL": "ahwang55@gmail.com",
            "DOMAIN": "carolandarthur.com",
            "GH_ACCESS_TOKEN": "cdf68d5884c3cbe2a2f2fbf4c8917458dee8c059",
            "GH_USERNAME": "ArthurHwang"
          }
        }
      },
      "DependsOn": ["GetDashguestsLogGroup"]
    },
    "GetDashguestsLambdaVersionY6yEAQlWYMV1OneM76tqBK2SvaBaTThUlzLfQgt90": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashguestsLambdaFunction"
        },
        "CodeSha256": "xV6V2kd2JQg5Vhy77vcQNIz5sS/x5zb0ob/Y0UkTHXg=",
        "Description": "GET /guests"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "prod-rsvp-serverless-backend",
        "EndpointConfiguration": {
          "Types": ["REGIONAL"]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceGuest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
        },
        "PathPart": "guest",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGuestEmailVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGuest"
        },
        "PathPart": "{email}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGuests": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
        },
        "PathPart": "guests",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGuestOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGuest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGuestEmailVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGuestEmailVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGuestsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGuests"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGuestPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGuest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["AddDashguestLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGuestEmailVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGuestEmailVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashguestLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGuestsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGuests"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashguestsLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1591286219417": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "ApiGatewayMethodGuestOptions",
        "ApiGatewayMethodGuestEmailVarOptions",
        "ApiGatewayMethodGuestsOptions",
        "ApiGatewayMethodGuestPost",
        "ApiGatewayMethodGuestEmailVarGet",
        "ApiGatewayMethodGuestsGet"
      ]
    },
    "AddDashguestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["AddDashguestLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashguestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashguestLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashguestsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashguestsLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "StreamDashtriggerEventSourceMappingDynamodbGuestsTable": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": ["GuestsTable", "StreamArn"]
        },
        "FunctionName": {
          "Fn::GetAtt": ["StreamDashtriggerLambdaFunction", "Arn"]
        },
        "StartingPosition": "LATEST",
        "Enabled": true
      }
    },
    "PostDashgitstatusEventsRuleCloudWatchEvent1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "source": ["aws.codepipeline"],
          "detail-type": ["CodePipeline Stage Execution State Change"],
          "detail": {
            "state": ["FAILED", "RESUMED", "SUCCEEDED", "CANCELED", "STARTED"]
          }
        },
        "State": "ENABLED",
        "Description": "Codepipeline event feeds state into lambda to post status to GitHub for commit status badge",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": ["PostDashgitstatusLambdaFunction", "Arn"]
            },
            "Id": "post-gitstatusCloudWatchEvent"
          }
        ]
      }
    },
    "PostDashgitstatusLambdaPermissionEventsRuleCloudWatchEvent1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["PostDashgitstatusLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": ["PostDashgitstatusEventsRuleCloudWatchEvent1", "Arn"]
        }
      }
    },
    "GuestsTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "rsvp-serverless-backend-prod",
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        },
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          },
          {
            "AttributeName": "timestamp",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "timestamp",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "email-index",
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "StreamDashtriggerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StreamDashtriggerLambdaVersionDjvYYWsAUQbehxGXj2INBWpTIc7IUD8RqbYnVEtQ8"
      }
    },
    "PostDashgitstatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostDashgitstatusLambdaVersionNYDuHtzwiLGhq9rbjVs6W2KnTs1UyUW0LSavxY08G4"
      }
    },
    "AddDashguestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddDashguestLambdaVersion0NUuBPQzTPy5NvO616TpZonuVQFBnJlUeCYAk5UyLI"
      }
    },
    "GetDashguestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashguestLambdaVersion1WXxDUR9vJ7TeEj0Ytah51GJFckzAqzp3NafFFKzk"
      }
    },
    "GetDashguestsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashguestsLambdaVersionY6yEAQlWYMV1OneM76tqBK2SvaBaTThUlzLfQgt90"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/prod"
          ]
        ]
      }
    }
  }
}
